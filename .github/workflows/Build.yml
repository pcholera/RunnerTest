name: Build

on: 
  push: 
    branches:
      - '**'
  release:
    types: [published]

jobs:
  buildConfig:
    name: Get Build Config
    uses: ./.github/workflows/BuildConfig.yml

  build:
    needs: buildConfig

    env:
      projectName: ${{ needs.buildConfig.outputs.repositoryName }}
      projectPath: ${{ needs.buildConfig.outputs.repositoryName }}/${{ needs.buildConfig.outputs.repositoryName }}.csproj

    runs-on: windows-latest
    if: "!github.event.release.prerelease"

    steps:
    - uses: actions/checkout@v2

    - name: "Print Repo Name"
      run: echo "Repo Name = ${{ needs.buildConfig.outputs.repositoryName }}"

    - name: "Print Branch Type"
      run: echo "Branch Type = ${{ needs.buildConfig.outputs.branchType }}"

    - name: "Print Version Number"
      run: echo "Version = ${{ needs.buildConfig.outputs.buildVersion }}"

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1

    - name: Ensure GitHub NuGet Source
      run: dotnet nuget add source https://nuget.pkg.github.com/pcholera/index.json -n github -u ${{ github.actor }}  -p ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text

    - name: Build
      run: dotnet build ${{ env.projectPath }} --configuration Release

    - name: Publish
      if: needs.buildConfig.outputs.branchType == 'main' || startsWith(github.ref, 'refs/tags/v')
      run: dotnet publish ${{ env.projectPath }} --configuration Release --no-restore --output .\Publish /p:AssemblyVersion=${{ needs.buildConfig.outputs.buildVersion }}

    - name: Upload Artifacts
      if: needs.buildConfig.outputs.branchType == 'main' || startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.projectName }} - ${{ needs.buildConfig.outputs.buildVersion }}
        path: .\Publish

    - name: Cleanup Github Nuget Source
      if: always()
      continue-on-error: true
      run: dotnet nuget remove source github

  deploy_to_dev:
    name: Deploy To Dev
    needs: [ build, buildConfig ]
    runs-on: ubuntu-latest
    if: needs.buildConfig.outputs.branchType == 'main' || (startsWith(github.ref, 'refs/tags/v') && github.event.release.prerelease)
    steps:
    - name: "Deploy"
      run: echo "Deploy To Dev Process"

  deploy_to_production:
    name: Deploy To Production
    needs: [ buildConfig ]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && !github.event.release.prerelease
    steps:
    - name: "Deploy"
      run: echo "Deploy To Production Process"


  auto_merge_release_to_main:
    needs: [build, buildConfig]
    if: needs.buildConfig.outputs.branchType == 'release'
    runs-on: ubuntu-latest

    steps:
      - uses: devmasx/merge-branch@v1.3.1
        with:
          type: now
          target_branch: main
          github_token: ${{ secrets.COMMIT_TOKEN }}
          label_name: 'automerge'
